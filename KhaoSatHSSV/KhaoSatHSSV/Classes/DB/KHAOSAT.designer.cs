#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KhaoSatHSSV.Classes.DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="khaoSat_HSSV_db")]
	public partial class KHAOSATDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertSurvey_Answer(Survey_Answer instance);
    partial void UpdateSurvey_Answer(Survey_Answer instance);
    partial void DeleteSurvey_Answer(Survey_Answer instance);
    partial void Inserttbl_Subject(tbl_Subject instance);
    partial void Updatetbl_Subject(tbl_Subject instance);
    partial void Deletetbl_Subject(tbl_Subject instance);
    partial void InsertTester(Tester instance);
    partial void UpdateTester(Tester instance);
    partial void DeleteTester(Tester instance);
    partial void InsertPointAverage(PointAverage instance);
    partial void UpdatePointAverage(PointAverage instance);
    partial void DeletePointAverage(PointAverage instance);
    #endregion
		
		public KHAOSATDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["khaoSat_HSSV_dbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public KHAOSATDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KHAOSATDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KHAOSATDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KHAOSATDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<Survey_Answer> Survey_Answers
		{
			get
			{
				return this.GetTable<Survey_Answer>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Subject> tbl_Subjects
		{
			get
			{
				return this.GetTable<tbl_Subject>();
			}
		}
		
		public System.Data.Linq.Table<Tester> Testers
		{
			get
			{
				return this.GetTable<Tester>();
			}
		}
		
		public System.Data.Linq.Table<PointAverage> PointAverages
		{
			get
			{
				return this.GetTable<PointAverage>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _GroupName;
		
		private string _Description;
		
		private System.Nullable<int> _DisplayOrder;
		
		private EntitySet<Question> _Questions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDisplayOrderChanging(System.Nullable<int> value);
    partial void OnDisplayOrderChanged();
    #endregion
		
		public Group()
		{
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(250)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int")]
		public System.Nullable<int> DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Question", Storage="_Questions", ThisKey="Id", OtherKey="GroupId")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Questions")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _QuestionName;
		
		private System.Nullable<int> _GroupId;
		
		private System.Nullable<int> _DisplayOrder;
		
		private System.Nullable<int> _QuestionType;
		
		private EntitySet<Survey_Answer> _Survey_Answers;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnQuestionNameChanging(string value);
    partial void OnQuestionNameChanged();
    partial void OnGroupIdChanging(System.Nullable<int> value);
    partial void OnGroupIdChanged();
    partial void OnDisplayOrderChanging(System.Nullable<int> value);
    partial void OnDisplayOrderChanged();
    partial void OnQuestionTypeChanging(System.Nullable<int> value);
    partial void OnQuestionTypeChanged();
    #endregion
		
		public Question()
		{
			this._Survey_Answers = new EntitySet<Survey_Answer>(new Action<Survey_Answer>(this.attach_Survey_Answers), new Action<Survey_Answer>(this.detach_Survey_Answers));
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionName", DbType="NVarChar(250)")]
		public string QuestionName
		{
			get
			{
				return this._QuestionName;
			}
			set
			{
				if ((this._QuestionName != value))
				{
					this.OnQuestionNameChanging(value);
					this.SendPropertyChanging();
					this._QuestionName = value;
					this.SendPropertyChanged("QuestionName");
					this.OnQuestionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int")]
		public System.Nullable<int> GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int")]
		public System.Nullable<int> DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionType", DbType="Int")]
		public System.Nullable<int> QuestionType
		{
			get
			{
				return this._QuestionType;
			}
			set
			{
				if ((this._QuestionType != value))
				{
					this.OnQuestionTypeChanging(value);
					this.SendPropertyChanging();
					this._QuestionType = value;
					this.SendPropertyChanged("QuestionType");
					this.OnQuestionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Survey_Answer", Storage="_Survey_Answers", ThisKey="Id", OtherKey="QuestionId")]
		public EntitySet<Survey_Answer> Survey_Answers
		{
			get
			{
				return this._Survey_Answers;
			}
			set
			{
				this._Survey_Answers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Question", Storage="_Group", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._GroupId = value.Id;
					}
					else
					{
						this._GroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Survey_Answers(Survey_Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Survey_Answers(Survey_Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Survey_Answer")]
	public partial class Survey_Answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<int> _QuestionId;
		
		private System.Nullable<int> _ChooseLevel;
		
		private System.Nullable<int> _TesterId;
		
		private EntityRef<Question> _Question;
		
		private EntityRef<Tester> _Tester;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnQuestionIdChanging(System.Nullable<int> value);
    partial void OnQuestionIdChanged();
    partial void OnChooseLevelChanging(System.Nullable<int> value);
    partial void OnChooseLevelChanged();
    partial void OnTesterIdChanging(System.Nullable<int> value);
    partial void OnTesterIdChanged();
    #endregion
		
		public Survey_Answer()
		{
			this._Question = default(EntityRef<Question>);
			this._Tester = default(EntityRef<Tester>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", DbType="Int")]
		public System.Nullable<int> QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChooseLevel", DbType="Int")]
		public System.Nullable<int> ChooseLevel
		{
			get
			{
				return this._ChooseLevel;
			}
			set
			{
				if ((this._ChooseLevel != value))
				{
					this.OnChooseLevelChanging(value);
					this.SendPropertyChanging();
					this._ChooseLevel = value;
					this.SendPropertyChanged("ChooseLevel");
					this.OnChooseLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TesterId", DbType="Int")]
		public System.Nullable<int> TesterId
		{
			get
			{
				return this._TesterId;
			}
			set
			{
				if ((this._TesterId != value))
				{
					if (this._Tester.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTesterIdChanging(value);
					this.SendPropertyChanging();
					this._TesterId = value;
					this.SendPropertyChanged("TesterId");
					this.OnTesterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Survey_Answer", Storage="_Question", ThisKey="QuestionId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Survey_Answers.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Survey_Answers.Add(this);
						this._QuestionId = value.Id;
					}
					else
					{
						this._QuestionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tester_Survey_Answer", Storage="_Tester", ThisKey="TesterId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Tester Tester
		{
			get
			{
				return this._Tester.Entity;
			}
			set
			{
				Tester previousValue = this._Tester.Entity;
				if (((previousValue != value) 
							|| (this._Tester.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tester.Entity = null;
						previousValue.Survey_Answers.Remove(this);
					}
					this._Tester.Entity = value;
					if ((value != null))
					{
						value.Survey_Answers.Add(this);
						this._TesterId = value.Id;
					}
					else
					{
						this._TesterId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tester");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_Subjects")]
	public partial class tbl_Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Subjects;
		
		private EntitySet<PointAverage> _PointAverages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSubjectsChanging(string value);
    partial void OnSubjectsChanged();
    #endregion
		
		public tbl_Subject()
		{
			this._PointAverages = new EntitySet<PointAverage>(new Action<PointAverage>(this.attach_PointAverages), new Action<PointAverage>(this.detach_PointAverages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subjects", DbType="NVarChar(50)")]
		public string Subjects
		{
			get
			{
				return this._Subjects;
			}
			set
			{
				if ((this._Subjects != value))
				{
					this.OnSubjectsChanging(value);
					this.SendPropertyChanging();
					this._Subjects = value;
					this.SendPropertyChanged("Subjects");
					this.OnSubjectsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Subject_PointAverage", Storage="_PointAverages", ThisKey="Id", OtherKey="SubjectId")]
		public EntitySet<PointAverage> PointAverages
		{
			get
			{
				return this._PointAverages;
			}
			set
			{
				this._PointAverages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PointAverages(PointAverage entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Subject = this;
		}
		
		private void detach_PointAverages(PointAverage entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tester")]
	public partial class Tester : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FullName;
		
		private string _Address;
		
		private string _Favorite;
		
		private System.Nullable<bool> _Gender;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private string _WhereBirth;
		
		private string _Phone;
		
		private string _HightSchool;
		
		private string _Province;
		
		private string _Department;
		
		private string _Reason;
		
		private System.Nullable<double> _Scores;
		
		private string _SchoolTest;
		
		private System.Nullable<bool> _A;
		
		private System.Nullable<bool> _B;
		
		private System.Nullable<bool> _C;
		
		private System.Nullable<bool> _D;
		
		private string _Orther;
		
		private string _SchoolLearning;
		
		private System.Nullable<bool> _IsMatch;
		
		private string _Reason1;
		
		private System.Nullable<int> _ResultR;
		
		private System.Nullable<int> _ResultI;
		
		private System.Nullable<int> _ResultA;
		
		private System.Nullable<int> _ResultS;
		
		private System.Nullable<int> _ResultC;
		
		private EntitySet<Survey_Answer> _Survey_Answers;
		
		private EntitySet<PointAverage> _PointAverages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnFavoriteChanging(string value);
    partial void OnFavoriteChanged();
    partial void OnGenderChanging(System.Nullable<bool> value);
    partial void OnGenderChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnWhereBirthChanging(string value);
    partial void OnWhereBirthChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnHightSchoolChanging(string value);
    partial void OnHightSchoolChanged();
    partial void OnProvinceChanging(string value);
    partial void OnProvinceChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnScoresChanging(System.Nullable<double> value);
    partial void OnScoresChanged();
    partial void OnSchoolTestChanging(string value);
    partial void OnSchoolTestChanged();
    partial void OnAChanging(System.Nullable<bool> value);
    partial void OnAChanged();
    partial void OnBChanging(System.Nullable<bool> value);
    partial void OnBChanged();
    partial void OnCChanging(System.Nullable<bool> value);
    partial void OnCChanged();
    partial void OnDChanging(System.Nullable<bool> value);
    partial void OnDChanged();
    partial void OnOrtherChanging(string value);
    partial void OnOrtherChanged();
    partial void OnSchoolLearningChanging(string value);
    partial void OnSchoolLearningChanged();
    partial void OnIsMatchChanging(System.Nullable<bool> value);
    partial void OnIsMatchChanged();
    partial void OnReason1Changing(string value);
    partial void OnReason1Changed();
    partial void OnResultRChanging(System.Nullable<int> value);
    partial void OnResultRChanged();
    partial void OnResultIChanging(System.Nullable<int> value);
    partial void OnResultIChanged();
    partial void OnResultAChanging(System.Nullable<int> value);
    partial void OnResultAChanged();
    partial void OnResultSChanging(System.Nullable<int> value);
    partial void OnResultSChanged();
    partial void OnResultCChanging(System.Nullable<int> value);
    partial void OnResultCChanged();
    #endregion
		
		public Tester()
		{
			this._Survey_Answers = new EntitySet<Survey_Answer>(new Action<Survey_Answer>(this.attach_Survey_Answers), new Action<Survey_Answer>(this.detach_Survey_Answers));
			this._PointAverages = new EntitySet<PointAverage>(new Action<PointAverage>(this.attach_PointAverages), new Action<PointAverage>(this.detach_PointAverages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(50)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(250)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Favorite", DbType="NVarChar(250)")]
		public string Favorite
		{
			get
			{
				return this._Favorite;
			}
			set
			{
				if ((this._Favorite != value))
				{
					this.OnFavoriteChanging(value);
					this.SendPropertyChanging();
					this._Favorite = value;
					this.SendPropertyChanged("Favorite");
					this.OnFavoriteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WhereBirth", DbType="NVarChar(50)")]
		public string WhereBirth
		{
			get
			{
				return this._WhereBirth;
			}
			set
			{
				if ((this._WhereBirth != value))
				{
					this.OnWhereBirthChanging(value);
					this.SendPropertyChanging();
					this._WhereBirth = value;
					this.SendPropertyChanged("WhereBirth");
					this.OnWhereBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HightSchool", DbType="NVarChar(50)")]
		public string HightSchool
		{
			get
			{
				return this._HightSchool;
			}
			set
			{
				if ((this._HightSchool != value))
				{
					this.OnHightSchoolChanging(value);
					this.SendPropertyChanging();
					this._HightSchool = value;
					this.SendPropertyChanged("HightSchool");
					this.OnHightSchoolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Province", DbType="NVarChar(50)")]
		public string Province
		{
			get
			{
				return this._Province;
			}
			set
			{
				if ((this._Province != value))
				{
					this.OnProvinceChanging(value);
					this.SendPropertyChanging();
					this._Province = value;
					this.SendPropertyChanged("Province");
					this.OnProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department", DbType="NVarChar(250)")]
		public string Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					this.OnDepartmentChanging(value);
					this.SendPropertyChanging();
					this._Department = value;
					this.SendPropertyChanged("Department");
					this.OnDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="NVarChar(250)")]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scores", DbType="Float")]
		public System.Nullable<double> Scores
		{
			get
			{
				return this._Scores;
			}
			set
			{
				if ((this._Scores != value))
				{
					this.OnScoresChanging(value);
					this.SendPropertyChanging();
					this._Scores = value;
					this.SendPropertyChanged("Scores");
					this.OnScoresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolTest", DbType="NVarChar(50)")]
		public string SchoolTest
		{
			get
			{
				return this._SchoolTest;
			}
			set
			{
				if ((this._SchoolTest != value))
				{
					this.OnSchoolTestChanging(value);
					this.SendPropertyChanging();
					this._SchoolTest = value;
					this.SendPropertyChanged("SchoolTest");
					this.OnSchoolTestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A", DbType="Bit")]
		public System.Nullable<bool> A
		{
			get
			{
				return this._A;
			}
			set
			{
				if ((this._A != value))
				{
					this.OnAChanging(value);
					this.SendPropertyChanging();
					this._A = value;
					this.SendPropertyChanged("A");
					this.OnAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_B", DbType="Bit")]
		public System.Nullable<bool> B
		{
			get
			{
				return this._B;
			}
			set
			{
				if ((this._B != value))
				{
					this.OnBChanging(value);
					this.SendPropertyChanging();
					this._B = value;
					this.SendPropertyChanged("B");
					this.OnBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C", DbType="Bit")]
		public System.Nullable<bool> C
		{
			get
			{
				return this._C;
			}
			set
			{
				if ((this._C != value))
				{
					this.OnCChanging(value);
					this.SendPropertyChanging();
					this._C = value;
					this.SendPropertyChanged("C");
					this.OnCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_D", DbType="Bit")]
		public System.Nullable<bool> D
		{
			get
			{
				return this._D;
			}
			set
			{
				if ((this._D != value))
				{
					this.OnDChanging(value);
					this.SendPropertyChanging();
					this._D = value;
					this.SendPropertyChanged("D");
					this.OnDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Orther", DbType="NVarChar(50)")]
		public string Orther
		{
			get
			{
				return this._Orther;
			}
			set
			{
				if ((this._Orther != value))
				{
					this.OnOrtherChanging(value);
					this.SendPropertyChanging();
					this._Orther = value;
					this.SendPropertyChanged("Orther");
					this.OnOrtherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolLearning", DbType="NVarChar(50)")]
		public string SchoolLearning
		{
			get
			{
				return this._SchoolLearning;
			}
			set
			{
				if ((this._SchoolLearning != value))
				{
					this.OnSchoolLearningChanging(value);
					this.SendPropertyChanging();
					this._SchoolLearning = value;
					this.SendPropertyChanged("SchoolLearning");
					this.OnSchoolLearningChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMatch", DbType="Bit")]
		public System.Nullable<bool> IsMatch
		{
			get
			{
				return this._IsMatch;
			}
			set
			{
				if ((this._IsMatch != value))
				{
					this.OnIsMatchChanging(value);
					this.SendPropertyChanging();
					this._IsMatch = value;
					this.SendPropertyChanged("IsMatch");
					this.OnIsMatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason1", DbType="NVarChar(250)")]
		public string Reason1
		{
			get
			{
				return this._Reason1;
			}
			set
			{
				if ((this._Reason1 != value))
				{
					this.OnReason1Changing(value);
					this.SendPropertyChanging();
					this._Reason1 = value;
					this.SendPropertyChanged("Reason1");
					this.OnReason1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultR", DbType="Int")]
		public System.Nullable<int> ResultR
		{
			get
			{
				return this._ResultR;
			}
			set
			{
				if ((this._ResultR != value))
				{
					this.OnResultRChanging(value);
					this.SendPropertyChanging();
					this._ResultR = value;
					this.SendPropertyChanged("ResultR");
					this.OnResultRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultI", DbType="Int")]
		public System.Nullable<int> ResultI
		{
			get
			{
				return this._ResultI;
			}
			set
			{
				if ((this._ResultI != value))
				{
					this.OnResultIChanging(value);
					this.SendPropertyChanging();
					this._ResultI = value;
					this.SendPropertyChanged("ResultI");
					this.OnResultIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultA", DbType="Int")]
		public System.Nullable<int> ResultA
		{
			get
			{
				return this._ResultA;
			}
			set
			{
				if ((this._ResultA != value))
				{
					this.OnResultAChanging(value);
					this.SendPropertyChanging();
					this._ResultA = value;
					this.SendPropertyChanged("ResultA");
					this.OnResultAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultS", DbType="Int")]
		public System.Nullable<int> ResultS
		{
			get
			{
				return this._ResultS;
			}
			set
			{
				if ((this._ResultS != value))
				{
					this.OnResultSChanging(value);
					this.SendPropertyChanging();
					this._ResultS = value;
					this.SendPropertyChanged("ResultS");
					this.OnResultSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultC", DbType="Int")]
		public System.Nullable<int> ResultC
		{
			get
			{
				return this._ResultC;
			}
			set
			{
				if ((this._ResultC != value))
				{
					this.OnResultCChanging(value);
					this.SendPropertyChanging();
					this._ResultC = value;
					this.SendPropertyChanged("ResultC");
					this.OnResultCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tester_Survey_Answer", Storage="_Survey_Answers", ThisKey="Id", OtherKey="TesterId")]
		public EntitySet<Survey_Answer> Survey_Answers
		{
			get
			{
				return this._Survey_Answers;
			}
			set
			{
				this._Survey_Answers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tester_PointAverage", Storage="_PointAverages", ThisKey="Id", OtherKey="TesterId")]
		public EntitySet<PointAverage> PointAverages
		{
			get
			{
				return this._PointAverages;
			}
			set
			{
				this._PointAverages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Survey_Answers(Survey_Answer entity)
		{
			this.SendPropertyChanging();
			entity.Tester = this;
		}
		
		private void detach_Survey_Answers(Survey_Answer entity)
		{
			this.SendPropertyChanging();
			entity.Tester = null;
		}
		
		private void attach_PointAverages(PointAverage entity)
		{
			this.SendPropertyChanging();
			entity.Tester = this;
		}
		
		private void detach_PointAverages(PointAverage entity)
		{
			this.SendPropertyChanging();
			entity.Tester = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PointAverage")]
	public partial class PointAverage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<double> _Ten;
		
		private System.Nullable<double> _Eleven;
		
		private System.Nullable<double> _Twelve;
		
		private System.Nullable<int> _SubjectId;
		
		private string _Block;
		
		private System.Nullable<int> _TesterId;
		
		private EntityRef<tbl_Subject> _tbl_Subject;
		
		private EntityRef<Tester> _Tester;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnTenChanging(System.Nullable<double> value);
    partial void OnTenChanged();
    partial void OnElevenChanging(System.Nullable<double> value);
    partial void OnElevenChanged();
    partial void OnTwelveChanging(System.Nullable<double> value);
    partial void OnTwelveChanged();
    partial void OnSubjectIdChanging(System.Nullable<int> value);
    partial void OnSubjectIdChanged();
    partial void OnBlockChanging(string value);
    partial void OnBlockChanged();
    partial void OnTesterIdChanging(System.Nullable<int> value);
    partial void OnTesterIdChanged();
    #endregion
		
		public PointAverage()
		{
			this._tbl_Subject = default(EntityRef<tbl_Subject>);
			this._Tester = default(EntityRef<Tester>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ten", DbType="Float")]
		public System.Nullable<double> Ten
		{
			get
			{
				return this._Ten;
			}
			set
			{
				if ((this._Ten != value))
				{
					this.OnTenChanging(value);
					this.SendPropertyChanging();
					this._Ten = value;
					this.SendPropertyChanged("Ten");
					this.OnTenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eleven", DbType="Float")]
		public System.Nullable<double> Eleven
		{
			get
			{
				return this._Eleven;
			}
			set
			{
				if ((this._Eleven != value))
				{
					this.OnElevenChanging(value);
					this.SendPropertyChanging();
					this._Eleven = value;
					this.SendPropertyChanged("Eleven");
					this.OnElevenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Twelve", DbType="Float")]
		public System.Nullable<double> Twelve
		{
			get
			{
				return this._Twelve;
			}
			set
			{
				if ((this._Twelve != value))
				{
					this.OnTwelveChanging(value);
					this.SendPropertyChanging();
					this._Twelve = value;
					this.SendPropertyChanged("Twelve");
					this.OnTwelveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="Int")]
		public System.Nullable<int> SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._tbl_Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Block", DbType="NVarChar(50)")]
		public string Block
		{
			get
			{
				return this._Block;
			}
			set
			{
				if ((this._Block != value))
				{
					this.OnBlockChanging(value);
					this.SendPropertyChanging();
					this._Block = value;
					this.SendPropertyChanged("Block");
					this.OnBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TesterId", DbType="Int")]
		public System.Nullable<int> TesterId
		{
			get
			{
				return this._TesterId;
			}
			set
			{
				if ((this._TesterId != value))
				{
					if (this._Tester.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTesterIdChanging(value);
					this.SendPropertyChanging();
					this._TesterId = value;
					this.SendPropertyChanged("TesterId");
					this.OnTesterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Subject_PointAverage", Storage="_tbl_Subject", ThisKey="SubjectId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public tbl_Subject tbl_Subject
		{
			get
			{
				return this._tbl_Subject.Entity;
			}
			set
			{
				tbl_Subject previousValue = this._tbl_Subject.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Subject.Entity = null;
						previousValue.PointAverages.Remove(this);
					}
					this._tbl_Subject.Entity = value;
					if ((value != null))
					{
						value.PointAverages.Add(this);
						this._SubjectId = value.Id;
					}
					else
					{
						this._SubjectId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tbl_Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tester_PointAverage", Storage="_Tester", ThisKey="TesterId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Tester Tester
		{
			get
			{
				return this._Tester.Entity;
			}
			set
			{
				Tester previousValue = this._Tester.Entity;
				if (((previousValue != value) 
							|| (this._Tester.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tester.Entity = null;
						previousValue.PointAverages.Remove(this);
					}
					this._Tester.Entity = value;
					if ((value != null))
					{
						value.PointAverages.Add(this);
						this._TesterId = value.Id;
					}
					else
					{
						this._TesterId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tester");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
