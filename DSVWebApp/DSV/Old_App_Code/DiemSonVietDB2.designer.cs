#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DSV
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="diemsonviet_db")]
	public partial class DiemSonVietDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWebLink(WebLink instance);
    partial void UpdateWebLink(WebLink instance);
    partial void DeleteWebLink(WebLink instance);
    partial void InsertConfigWeb(ConfigWeb instance);
    partial void UpdateConfigWeb(ConfigWeb instance);
    partial void DeleteConfigWeb(ConfigWeb instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertContentPage(ContentPage instance);
    partial void UpdateContentPage(ContentPage instance);
    partial void DeleteContentPage(ContentPage instance);
    partial void Inserttbl_Category(tbl_Category instance);
    partial void Updatetbl_Category(tbl_Category instance);
    partial void Deletetbl_Category(tbl_Category instance);
    partial void Inserttbl_ContentPage(tbl_ContentPage instance);
    partial void Updatetbl_ContentPage(tbl_ContentPage instance);
    partial void Deletetbl_ContentPage(tbl_ContentPage instance);
    partial void InsertCategory_New(Category_New instance);
    partial void UpdateCategory_New(Category_New instance);
    partial void DeleteCategory_New(Category_New instance);
    partial void InsertNew(New instance);
    partial void UpdateNew(New instance);
    partial void DeleteNew(New instance);
    #endregion
		
		public DiemSonVietDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DiemSonVietDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DiemSonVietDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DiemSonVietDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DiemSonVietDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DiemSonVietDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<WebLink> WebLinks
		{
			get
			{
				return this.GetTable<WebLink>();
			}
		}
		
		public System.Data.Linq.Table<ConfigWeb> ConfigWebs
		{
			get
			{
				return this.GetTable<ConfigWeb>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<ContentPage> ContentPages
		{
			get
			{
				return this.GetTable<ContentPage>();
			}
		}
		
		public System.Data.Linq.Table<tbl_Category> tbl_Categories
		{
			get
			{
				return this.GetTable<tbl_Category>();
			}
		}
		
		public System.Data.Linq.Table<tbl_ContentPage> tbl_ContentPages
		{
			get
			{
				return this.GetTable<tbl_ContentPage>();
			}
		}
		
		public System.Data.Linq.Table<Category_New> Category_News
		{
			get
			{
				return this.GetTable<Category_New>();
			}
		}
		
		public System.Data.Linq.Table<New> News
		{
			get
			{
				return this.GetTable<New>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetTopEachCategoryNews")]
		public ISingleResult<New> GetTopEachCategoryNews()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<New>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WebLinks")]
	public partial class WebLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _LinkName;
		
		private string _Links;
		
		private System.Nullable<int> _DisplayOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLinkNameChanging(string value);
    partial void OnLinkNameChanged();
    partial void OnLinksChanging(string value);
    partial void OnLinksChanged();
    partial void OnDisplayOrderChanging(System.Nullable<int> value);
    partial void OnDisplayOrderChanged();
    #endregion
		
		public WebLink()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkName", DbType="NVarChar(50)")]
		public string LinkName
		{
			get
			{
				return this._LinkName;
			}
			set
			{
				if ((this._LinkName != value))
				{
					this.OnLinkNameChanging(value);
					this.SendPropertyChanging();
					this._LinkName = value;
					this.SendPropertyChanged("LinkName");
					this.OnLinkNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Links", DbType="NVarChar(500)")]
		public string Links
		{
			get
			{
				return this._Links;
			}
			set
			{
				if ((this._Links != value))
				{
					this.OnLinksChanging(value);
					this.SendPropertyChanging();
					this._Links = value;
					this.SendPropertyChanged("Links");
					this.OnLinksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int")]
		public System.Nullable<int> DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConfigWeb")]
	public partial class ConfigWeb : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Settingkey;
		
		private string _SettingValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSettingkeyChanging(string value);
    partial void OnSettingkeyChanged();
    partial void OnSettingValueChanging(string value);
    partial void OnSettingValueChanged();
    #endregion
		
		public ConfigWeb()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Settingkey", DbType="NVarChar(50)")]
		public string Settingkey
		{
			get
			{
				return this._Settingkey;
			}
			set
			{
				if ((this._Settingkey != value))
				{
					this.OnSettingkeyChanging(value);
					this.SendPropertyChanging();
					this._Settingkey = value;
					this.SendPropertyChanged("Settingkey");
					this.OnSettingkeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingValue", DbType="NVarChar(50)")]
		public string SettingValue
		{
			get
			{
				return this._SettingValue;
			}
			set
			{
				if ((this._SettingValue != value))
				{
					this.OnSettingValueChanging(value);
					this.SendPropertyChanging();
					this._SettingValue = value;
					this.SendPropertyChanged("SettingValue");
					this.OnSettingValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CateName;
		
		private System.Nullable<int> _DisplayOrder;
		
		private System.Nullable<int> _ParentId;
		
		private System.Nullable<bool> _Hidden;
		
		private EntitySet<Category> _Categories;
		
		private EntitySet<ContentPage> _ContentPages;
		
		private EntityRef<Category> _Category1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCateNameChanging(string value);
    partial void OnCateNameChanged();
    partial void OnDisplayOrderChanging(System.Nullable<int> value);
    partial void OnDisplayOrderChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    partial void OnHiddenChanging(System.Nullable<bool> value);
    partial void OnHiddenChanged();
    #endregion
		
		public Category()
		{
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._ContentPages = new EntitySet<ContentPage>(new Action<ContentPage>(this.attach_ContentPages), new Action<ContentPage>(this.detach_ContentPages));
			this._Category1 = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CateName", DbType="NVarChar(50)")]
		public string CateName
		{
			get
			{
				return this._CateName;
			}
			set
			{
				if ((this._CateName != value))
				{
					this.OnCateNameChanging(value);
					this.SendPropertyChanging();
					this._CateName = value;
					this.SendPropertyChanged("CateName");
					this.OnCateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int")]
		public System.Nullable<int> DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int")]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._Category1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="Bit")]
		public System.Nullable<bool> Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged("Hidden");
					this.OnHiddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Category", Storage="_Categories", ThisKey="Id", OtherKey="ParentId")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_ContentPage", Storage="_ContentPages", ThisKey="Id", OtherKey="CateId")]
		public EntitySet<ContentPage> ContentPages
		{
			get
			{
				return this._ContentPages;
			}
			set
			{
				this._ContentPages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Category", Storage="_Category1", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
		public Category Category1
		{
			get
			{
				return this._Category1.Entity;
			}
			set
			{
				Category previousValue = this._Category1.Entity;
				if (((previousValue != value) 
							|| (this._Category1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category1.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Category1.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._ParentId = value.Id;
					}
					else
					{
						this._ParentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Category1 = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Category1 = null;
		}
		
		private void attach_ContentPages(ContentPage entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_ContentPages(ContentPage entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContentPages")]
	public partial class ContentPage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ContentName;
		
		private string _Contents;
		
		private string _ContentTitle;
		
		private System.Nullable<bool> _IsHomePage;
		
		private string _ShortContent;
		
		private string _Icon;
		
		private System.Nullable<int> _CateId;
		
		private System.Nullable<bool> _LinkInContent;
		
		private string _MetaTitle;
		
		private string _MetaKeywords;
		
		private string _MetaDescriptions;
		
		private System.Nullable<bool> _Hidden;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnContentNameChanging(string value);
    partial void OnContentNameChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    partial void OnContentTitleChanging(string value);
    partial void OnContentTitleChanged();
    partial void OnIsHomePageChanging(System.Nullable<bool> value);
    partial void OnIsHomePageChanged();
    partial void OnShortContentChanging(string value);
    partial void OnShortContentChanged();
    partial void OnIconChanging(string value);
    partial void OnIconChanged();
    partial void OnCateIdChanging(System.Nullable<int> value);
    partial void OnCateIdChanged();
    partial void OnLinkInContentChanging(System.Nullable<bool> value);
    partial void OnLinkInContentChanged();
    partial void OnMetaTitleChanging(string value);
    partial void OnMetaTitleChanged();
    partial void OnMetaKeywordsChanging(string value);
    partial void OnMetaKeywordsChanged();
    partial void OnMetaDescriptionsChanging(string value);
    partial void OnMetaDescriptionsChanged();
    partial void OnHiddenChanging(System.Nullable<bool> value);
    partial void OnHiddenChanged();
    #endregion
		
		public ContentPage()
		{
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentName", DbType="NVarChar(50)")]
		public string ContentName
		{
			get
			{
				return this._ContentName;
			}
			set
			{
				if ((this._ContentName != value))
				{
					this.OnContentNameChanging(value);
					this.SendPropertyChanging();
					this._ContentName = value;
					this.SendPropertyChanged("ContentName");
					this.OnContentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contents", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentTitle", DbType="NVarChar(50)")]
		public string ContentTitle
		{
			get
			{
				return this._ContentTitle;
			}
			set
			{
				if ((this._ContentTitle != value))
				{
					this.OnContentTitleChanging(value);
					this.SendPropertyChanging();
					this._ContentTitle = value;
					this.SendPropertyChanged("ContentTitle");
					this.OnContentTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHomePage", DbType="Bit")]
		public System.Nullable<bool> IsHomePage
		{
			get
			{
				return this._IsHomePage;
			}
			set
			{
				if ((this._IsHomePage != value))
				{
					this.OnIsHomePageChanging(value);
					this.SendPropertyChanging();
					this._IsHomePage = value;
					this.SendPropertyChanged("IsHomePage");
					this.OnIsHomePageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortContent", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string ShortContent
		{
			get
			{
				return this._ShortContent;
			}
			set
			{
				if ((this._ShortContent != value))
				{
					this.OnShortContentChanging(value);
					this.SendPropertyChanging();
					this._ShortContent = value;
					this.SendPropertyChanged("ShortContent");
					this.OnShortContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Icon", DbType="NVarChar(255)")]
		public string Icon
		{
			get
			{
				return this._Icon;
			}
			set
			{
				if ((this._Icon != value))
				{
					this.OnIconChanging(value);
					this.SendPropertyChanging();
					this._Icon = value;
					this.SendPropertyChanged("Icon");
					this.OnIconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CateId", DbType="Int")]
		public System.Nullable<int> CateId
		{
			get
			{
				return this._CateId;
			}
			set
			{
				if ((this._CateId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCateIdChanging(value);
					this.SendPropertyChanging();
					this._CateId = value;
					this.SendPropertyChanged("CateId");
					this.OnCateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkInContent", DbType="Bit")]
		public System.Nullable<bool> LinkInContent
		{
			get
			{
				return this._LinkInContent;
			}
			set
			{
				if ((this._LinkInContent != value))
				{
					this.OnLinkInContentChanging(value);
					this.SendPropertyChanging();
					this._LinkInContent = value;
					this.SendPropertyChanged("LinkInContent");
					this.OnLinkInContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaTitle", DbType="NVarChar(500)")]
		public string MetaTitle
		{
			get
			{
				return this._MetaTitle;
			}
			set
			{
				if ((this._MetaTitle != value))
				{
					this.OnMetaTitleChanging(value);
					this.SendPropertyChanging();
					this._MetaTitle = value;
					this.SendPropertyChanged("MetaTitle");
					this.OnMetaTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaKeywords", DbType="NVarChar(500)")]
		public string MetaKeywords
		{
			get
			{
				return this._MetaKeywords;
			}
			set
			{
				if ((this._MetaKeywords != value))
				{
					this.OnMetaKeywordsChanging(value);
					this.SendPropertyChanging();
					this._MetaKeywords = value;
					this.SendPropertyChanged("MetaKeywords");
					this.OnMetaKeywordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaDescriptions", DbType="NVarChar(500)")]
		public string MetaDescriptions
		{
			get
			{
				return this._MetaDescriptions;
			}
			set
			{
				if ((this._MetaDescriptions != value))
				{
					this.OnMetaDescriptionsChanging(value);
					this.SendPropertyChanging();
					this._MetaDescriptions = value;
					this.SendPropertyChanged("MetaDescriptions");
					this.OnMetaDescriptionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="Bit")]
		public System.Nullable<bool> Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged("Hidden");
					this.OnHiddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_ContentPage", Storage="_Category", ThisKey="CateId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.ContentPages.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.ContentPages.Add(this);
						this._CateId = value.Id;
					}
					else
					{
						this._CateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_Categories")]
	public partial class tbl_Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CateName;
		
		private System.Nullable<int> _DisplayOrder;
		
		private System.Nullable<int> _ParentId;
		
		private System.Nullable<bool> _Hidden;
		
		private EntitySet<tbl_Category> _tbl_Categories;
		
		private EntitySet<tbl_ContentPage> _tbl_ContentPages;
		
		private EntityRef<tbl_Category> _tbl_Category1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCateNameChanging(string value);
    partial void OnCateNameChanged();
    partial void OnDisplayOrderChanging(System.Nullable<int> value);
    partial void OnDisplayOrderChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    partial void OnHiddenChanging(System.Nullable<bool> value);
    partial void OnHiddenChanged();
    #endregion
		
		public tbl_Category()
		{
			this._tbl_Categories = new EntitySet<tbl_Category>(new Action<tbl_Category>(this.attach_tbl_Categories), new Action<tbl_Category>(this.detach_tbl_Categories));
			this._tbl_ContentPages = new EntitySet<tbl_ContentPage>(new Action<tbl_ContentPage>(this.attach_tbl_ContentPages), new Action<tbl_ContentPage>(this.detach_tbl_ContentPages));
			this._tbl_Category1 = default(EntityRef<tbl_Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CateName", DbType="NVarChar(50)")]
		public string CateName
		{
			get
			{
				return this._CateName;
			}
			set
			{
				if ((this._CateName != value))
				{
					this.OnCateNameChanging(value);
					this.SendPropertyChanging();
					this._CateName = value;
					this.SendPropertyChanged("CateName");
					this.OnCateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int")]
		public System.Nullable<int> DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int")]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._tbl_Category1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="Bit")]
		public System.Nullable<bool> Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged("Hidden");
					this.OnHiddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Category_tbl_Category", Storage="_tbl_Categories", ThisKey="Id", OtherKey="ParentId")]
		public EntitySet<tbl_Category> tbl_Categories
		{
			get
			{
				return this._tbl_Categories;
			}
			set
			{
				this._tbl_Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Category_tbl_ContentPage", Storage="_tbl_ContentPages", ThisKey="Id", OtherKey="CateId")]
		public EntitySet<tbl_ContentPage> tbl_ContentPages
		{
			get
			{
				return this._tbl_ContentPages;
			}
			set
			{
				this._tbl_ContentPages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Category_tbl_Category", Storage="_tbl_Category1", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
		public tbl_Category tbl_Category1
		{
			get
			{
				return this._tbl_Category1.Entity;
			}
			set
			{
				tbl_Category previousValue = this._tbl_Category1.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Category1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Category1.Entity = null;
						previousValue.tbl_Categories.Remove(this);
					}
					this._tbl_Category1.Entity = value;
					if ((value != null))
					{
						value.tbl_Categories.Add(this);
						this._ParentId = value.Id;
					}
					else
					{
						this._ParentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tbl_Category1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_Categories(tbl_Category entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Category1 = this;
		}
		
		private void detach_tbl_Categories(tbl_Category entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Category1 = null;
		}
		
		private void attach_tbl_ContentPages(tbl_ContentPage entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Category = this;
		}
		
		private void detach_tbl_ContentPages(tbl_ContentPage entity)
		{
			this.SendPropertyChanging();
			entity.tbl_Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbl_ContentPages")]
	public partial class tbl_ContentPage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ContentName;
		
		private string _Contents;
		
		private string _ContentTitle;
		
		private System.Nullable<bool> _IsHomePage;
		
		private string _ShortContent;
		
		private string _Icon;
		
		private System.Nullable<int> _CateId;
		
		private System.Nullable<bool> _LinkInContent;
		
		private string _MetaTitle;
		
		private string _MetaKeywords;
		
		private string _MetaDescriptions;
		
		private System.Nullable<bool> _Hidden;
		
		private EntityRef<tbl_Category> _tbl_Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnContentNameChanging(string value);
    partial void OnContentNameChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    partial void OnContentTitleChanging(string value);
    partial void OnContentTitleChanged();
    partial void OnIsHomePageChanging(System.Nullable<bool> value);
    partial void OnIsHomePageChanged();
    partial void OnShortContentChanging(string value);
    partial void OnShortContentChanged();
    partial void OnIconChanging(string value);
    partial void OnIconChanged();
    partial void OnCateIdChanging(System.Nullable<int> value);
    partial void OnCateIdChanged();
    partial void OnLinkInContentChanging(System.Nullable<bool> value);
    partial void OnLinkInContentChanged();
    partial void OnMetaTitleChanging(string value);
    partial void OnMetaTitleChanged();
    partial void OnMetaKeywordsChanging(string value);
    partial void OnMetaKeywordsChanged();
    partial void OnMetaDescriptionsChanging(string value);
    partial void OnMetaDescriptionsChanged();
    partial void OnHiddenChanging(System.Nullable<bool> value);
    partial void OnHiddenChanged();
    #endregion
		
		public tbl_ContentPage()
		{
			this._tbl_Category = default(EntityRef<tbl_Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentName", DbType="NVarChar(500)")]
		public string ContentName
		{
			get
			{
				return this._ContentName;
			}
			set
			{
				if ((this._ContentName != value))
				{
					this.OnContentNameChanging(value);
					this.SendPropertyChanging();
					this._ContentName = value;
					this.SendPropertyChanged("ContentName");
					this.OnContentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contents", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentTitle", DbType="NVarChar(500)")]
		public string ContentTitle
		{
			get
			{
				return this._ContentTitle;
			}
			set
			{
				if ((this._ContentTitle != value))
				{
					this.OnContentTitleChanging(value);
					this.SendPropertyChanging();
					this._ContentTitle = value;
					this.SendPropertyChanged("ContentTitle");
					this.OnContentTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHomePage", DbType="Bit")]
		public System.Nullable<bool> IsHomePage
		{
			get
			{
				return this._IsHomePage;
			}
			set
			{
				if ((this._IsHomePage != value))
				{
					this.OnIsHomePageChanging(value);
					this.SendPropertyChanging();
					this._IsHomePage = value;
					this.SendPropertyChanged("IsHomePage");
					this.OnIsHomePageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortContent", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string ShortContent
		{
			get
			{
				return this._ShortContent;
			}
			set
			{
				if ((this._ShortContent != value))
				{
					this.OnShortContentChanging(value);
					this.SendPropertyChanging();
					this._ShortContent = value;
					this.SendPropertyChanged("ShortContent");
					this.OnShortContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Icon", DbType="NVarChar(255)")]
		public string Icon
		{
			get
			{
				return this._Icon;
			}
			set
			{
				if ((this._Icon != value))
				{
					this.OnIconChanging(value);
					this.SendPropertyChanging();
					this._Icon = value;
					this.SendPropertyChanged("Icon");
					this.OnIconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CateId", DbType="Int")]
		public System.Nullable<int> CateId
		{
			get
			{
				return this._CateId;
			}
			set
			{
				if ((this._CateId != value))
				{
					if (this._tbl_Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCateIdChanging(value);
					this.SendPropertyChanging();
					this._CateId = value;
					this.SendPropertyChanged("CateId");
					this.OnCateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkInContent", DbType="Bit")]
		public System.Nullable<bool> LinkInContent
		{
			get
			{
				return this._LinkInContent;
			}
			set
			{
				if ((this._LinkInContent != value))
				{
					this.OnLinkInContentChanging(value);
					this.SendPropertyChanging();
					this._LinkInContent = value;
					this.SendPropertyChanged("LinkInContent");
					this.OnLinkInContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaTitle", DbType="NVarChar(MAX)")]
		public string MetaTitle
		{
			get
			{
				return this._MetaTitle;
			}
			set
			{
				if ((this._MetaTitle != value))
				{
					this.OnMetaTitleChanging(value);
					this.SendPropertyChanging();
					this._MetaTitle = value;
					this.SendPropertyChanged("MetaTitle");
					this.OnMetaTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaKeywords", DbType="NVarChar(MAX)")]
		public string MetaKeywords
		{
			get
			{
				return this._MetaKeywords;
			}
			set
			{
				if ((this._MetaKeywords != value))
				{
					this.OnMetaKeywordsChanging(value);
					this.SendPropertyChanging();
					this._MetaKeywords = value;
					this.SendPropertyChanged("MetaKeywords");
					this.OnMetaKeywordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaDescriptions", DbType="NVarChar(MAX)")]
		public string MetaDescriptions
		{
			get
			{
				return this._MetaDescriptions;
			}
			set
			{
				if ((this._MetaDescriptions != value))
				{
					this.OnMetaDescriptionsChanging(value);
					this.SendPropertyChanging();
					this._MetaDescriptions = value;
					this.SendPropertyChanged("MetaDescriptions");
					this.OnMetaDescriptionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="Bit")]
		public System.Nullable<bool> Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged("Hidden");
					this.OnHiddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbl_Category_tbl_ContentPage", Storage="_tbl_Category", ThisKey="CateId", OtherKey="Id", IsForeignKey=true)]
		public tbl_Category tbl_Category
		{
			get
			{
				return this._tbl_Category.Entity;
			}
			set
			{
				tbl_Category previousValue = this._tbl_Category.Entity;
				if (((previousValue != value) 
							|| (this._tbl_Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_Category.Entity = null;
						previousValue.tbl_ContentPages.Remove(this);
					}
					this._tbl_Category.Entity = value;
					if ((value != null))
					{
						value.tbl_ContentPages.Add(this);
						this._CateId = value.Id;
					}
					else
					{
						this._CateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tbl_Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category_News")]
	public partial class Category_New : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CategoryName;
		
		private int _DisplayOrder;
		
		private bool _IsHidden;
		
		private EntitySet<New> _News;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnDisplayOrderChanging(int value);
    partial void OnDisplayOrderChanged();
    partial void OnIsHiddenChanging(bool value);
    partial void OnIsHiddenChanged();
    #endregion
		
		public Category_New()
		{
			this._News = new EntitySet<New>(new Action<New>(this.attach_News), new Action<New>(this.detach_News));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int NOT NULL")]
		public int DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHidden", DbType="Bit NOT NULL")]
		public bool IsHidden
		{
			get
			{
				return this._IsHidden;
			}
			set
			{
				if ((this._IsHidden != value))
				{
					this.OnIsHiddenChanging(value);
					this.SendPropertyChanging();
					this._IsHidden = value;
					this.SendPropertyChanged("IsHidden");
					this.OnIsHiddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_New_New", Storage="_News", ThisKey="Id", OtherKey="CateId")]
		public EntitySet<New> News
		{
			get
			{
				return this._News;
			}
			set
			{
				this._News.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_News(New entity)
		{
			this.SendPropertyChanging();
			entity.Category_New = this;
		}
		
		private void detach_News(New entity)
		{
			this.SendPropertyChanging();
			entity.Category_New = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.News")]
	public partial class New : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ArTitle;
		
		private string _ArSummary;
		
		private string _ArContent;
		
		private string _ImageDefault;
		
		private bool _IsPublished;
		
		private System.DateTime _CreateDated;
		
		private System.Nullable<int> _CateId;
		
		private int _NumberView;
		
		private System.DateTime _PublishDated;
		
		private int _DisplayOrder;
		
		private bool _HotNews;
		
		private string _MetaTitle;
		
		private string _MetaKeyword;
		
		private string _MetaDesc;
		
		private EntityRef<Category_New> _Category_New;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnArTitleChanging(string value);
    partial void OnArTitleChanged();
    partial void OnArSummaryChanging(string value);
    partial void OnArSummaryChanged();
    partial void OnArContentChanging(string value);
    partial void OnArContentChanged();
    partial void OnImageDefaultChanging(string value);
    partial void OnImageDefaultChanged();
    partial void OnIsPublishedChanging(bool value);
    partial void OnIsPublishedChanged();
    partial void OnCreateDatedChanging(System.DateTime value);
    partial void OnCreateDatedChanged();
    partial void OnCateIdChanging(System.Nullable<int> value);
    partial void OnCateIdChanged();
    partial void OnNumberViewChanging(int value);
    partial void OnNumberViewChanged();
    partial void OnPublishDatedChanging(System.DateTime value);
    partial void OnPublishDatedChanged();
    partial void OnDisplayOrderChanging(int value);
    partial void OnDisplayOrderChanged();
    partial void OnHotNewsChanging(bool value);
    partial void OnHotNewsChanged();
    partial void OnMetaTitleChanging(string value);
    partial void OnMetaTitleChanged();
    partial void OnMetaKeywordChanging(string value);
    partial void OnMetaKeywordChanged();
    partial void OnMetaDescChanging(string value);
    partial void OnMetaDescChanged();
    #endregion
		
		public New()
		{
			this._Category_New = default(EntityRef<Category_New>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArTitle", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string ArTitle
		{
			get
			{
				return this._ArTitle;
			}
			set
			{
				if ((this._ArTitle != value))
				{
					this.OnArTitleChanging(value);
					this.SendPropertyChanging();
					this._ArTitle = value;
					this.SendPropertyChanged("ArTitle");
					this.OnArTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArSummary", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ArSummary
		{
			get
			{
				return this._ArSummary;
			}
			set
			{
				if ((this._ArSummary != value))
				{
					this.OnArSummaryChanging(value);
					this.SendPropertyChanging();
					this._ArSummary = value;
					this.SendPropertyChanged("ArSummary");
					this.OnArSummaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArContent", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ArContent
		{
			get
			{
				return this._ArContent;
			}
			set
			{
				if ((this._ArContent != value))
				{
					this.OnArContentChanging(value);
					this.SendPropertyChanging();
					this._ArContent = value;
					this.SendPropertyChanged("ArContent");
					this.OnArContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageDefault", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string ImageDefault
		{
			get
			{
				return this._ImageDefault;
			}
			set
			{
				if ((this._ImageDefault != value))
				{
					this.OnImageDefaultChanging(value);
					this.SendPropertyChanging();
					this._ImageDefault = value;
					this.SendPropertyChanged("ImageDefault");
					this.OnImageDefaultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPublished", DbType="Bit NOT NULL")]
		public bool IsPublished
		{
			get
			{
				return this._IsPublished;
			}
			set
			{
				if ((this._IsPublished != value))
				{
					this.OnIsPublishedChanging(value);
					this.SendPropertyChanging();
					this._IsPublished = value;
					this.SendPropertyChanged("IsPublished");
					this.OnIsPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDated", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDated
		{
			get
			{
				return this._CreateDated;
			}
			set
			{
				if ((this._CreateDated != value))
				{
					this.OnCreateDatedChanging(value);
					this.SendPropertyChanging();
					this._CreateDated = value;
					this.SendPropertyChanged("CreateDated");
					this.OnCreateDatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CateId", DbType="Int")]
		public System.Nullable<int> CateId
		{
			get
			{
				return this._CateId;
			}
			set
			{
				if ((this._CateId != value))
				{
					if (this._Category_New.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCateIdChanging(value);
					this.SendPropertyChanging();
					this._CateId = value;
					this.SendPropertyChanged("CateId");
					this.OnCateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberView", DbType="Int NOT NULL")]
		public int NumberView
		{
			get
			{
				return this._NumberView;
			}
			set
			{
				if ((this._NumberView != value))
				{
					this.OnNumberViewChanging(value);
					this.SendPropertyChanging();
					this._NumberView = value;
					this.SendPropertyChanged("NumberView");
					this.OnNumberViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishDated", DbType="DateTime NOT NULL")]
		public System.DateTime PublishDated
		{
			get
			{
				return this._PublishDated;
			}
			set
			{
				if ((this._PublishDated != value))
				{
					this.OnPublishDatedChanging(value);
					this.SendPropertyChanging();
					this._PublishDated = value;
					this.SendPropertyChanged("PublishDated");
					this.OnPublishDatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int NOT NULL")]
		public int DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotNews", DbType="Bit NOT NULL")]
		public bool HotNews
		{
			get
			{
				return this._HotNews;
			}
			set
			{
				if ((this._HotNews != value))
				{
					this.OnHotNewsChanging(value);
					this.SendPropertyChanging();
					this._HotNews = value;
					this.SendPropertyChanged("HotNews");
					this.OnHotNewsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaTitle", DbType="NVarChar(500)")]
		public string MetaTitle
		{
			get
			{
				return this._MetaTitle;
			}
			set
			{
				if ((this._MetaTitle != value))
				{
					this.OnMetaTitleChanging(value);
					this.SendPropertyChanging();
					this._MetaTitle = value;
					this.SendPropertyChanged("MetaTitle");
					this.OnMetaTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaKeyword", DbType="NVarChar(500)")]
		public string MetaKeyword
		{
			get
			{
				return this._MetaKeyword;
			}
			set
			{
				if ((this._MetaKeyword != value))
				{
					this.OnMetaKeywordChanging(value);
					this.SendPropertyChanging();
					this._MetaKeyword = value;
					this.SendPropertyChanged("MetaKeyword");
					this.OnMetaKeywordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaDesc", DbType="NVarChar(500)")]
		public string MetaDesc
		{
			get
			{
				return this._MetaDesc;
			}
			set
			{
				if ((this._MetaDesc != value))
				{
					this.OnMetaDescChanging(value);
					this.SendPropertyChanging();
					this._MetaDesc = value;
					this.SendPropertyChanged("MetaDesc");
					this.OnMetaDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_New_New", Storage="_Category_New", ThisKey="CateId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
		public Category_New Category_New
		{
			get
			{
				return this._Category_New.Entity;
			}
			set
			{
				Category_New previousValue = this._Category_New.Entity;
				if (((previousValue != value) 
							|| (this._Category_New.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category_New.Entity = null;
						previousValue.News.Remove(this);
					}
					this._Category_New.Entity = value;
					if ((value != null))
					{
						value.News.Add(this);
						this._CateId = value.Id;
					}
					else
					{
						this._CateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category_New");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
